import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
import matplotlib.pyplot as plt
from PIL import Image
import io

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="üé≠ Dashboard Cultural",
    page_icon="üé≠",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para el tema morado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #6a0dad, #9370db);
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        color: white;
        text-align: center;
    }
    .metric-card {
        background: linear-gradient(135deg, #f5f3ff, #ede9fe);
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #6a0dad;
        margin: 1rem 0;
    }
    .section-header {
        background: linear-gradient(90deg, #9370db, #dda0dd);
        color: white;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #f8f4ff, #f3e8ff);
    }
    /* Mejora de visibilidad para los selectbox */
    .stSelectbox > div > div {
        background-color: white !important; 
        color: #333 !important;
        border: 1px solid #dda0dd;
    }
    .stSelectbox > div > div > div {
        color: #333 !important;
        font-weight: 500;
    }
    .plot-container {
        border: 2px solid #dda0dd;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
        background: white;
    }
</style>
""", unsafe_allow_html=True)

# Funci√≥n para crear paleta de colores morada
def get_purple_palette(n_colors):
    """Genera una paleta de colores morados"""
    base_colors = ['#6a0dad', '#8a2be2', '#9370db', '#9932cc', '#ba55d3', 
                  '#da70d6', '#dda0dd', '#e6e6fa', '#f8f4ff']
    if n_colors <= len(base_colors):
        return base_colors[:n_colors]
    else:
        # Si necesitamos m√°s colores, interpolar
        return px.colors.sample_colorscale('Purples', n_colors)

# Header principal
st.markdown("""
<div class="main-header">
    <h1>üé≠ Dashboard de An√°lisis Cultural</h1>
    <p>An√°lisis Estad√≠stico de Participaci√≥n Cultural en Colombia</p>
</div>
""", unsafe_allow_html=True)

# Sidebar para navegaci√≥n
st.sidebar.markdown("## üé® Panel de Control")
page = st.sidebar.selectbox(
    "Selecciona una secci√≥n:",
    ["üìä Resumen Ejecutivo", "üìà Estad√≠sticas Descriptivas", "üßπ Limpieza de Datos", 
     "üîç An√°lisis Demogr√°fico", "üé™ Participaci√≥n Cultural", "üìö Actividades Espec√≠ficas", 
     "üî¨ An√°lisis Avanzado", "üîÑ Comparativas"]
)

# Funci√≥n para cargar y procesar datos
@st.cache_data
def load_and_process_data():
    """Carga y procesa los datos culturales"""
    # Aqu√≠ podr√≠as cargar el archivo Excel directamente
    # df = pd.read_excel('cultura.xlsx')
    
    # Para este ejemplo, crearemos datos sint√©ticos basados en las variables proporcionadas
    np.random.seed(42)
    n_samples = 27800  # Actualizado a ~27,800 como se menciona
    
    data = {
        'id': range(1, n_samples + 1),
        'sexo': np.random.choice(['HOMBRE', 'MUJER'], n_samples),
        'edad': np.random.randint(15, 80, n_samples),
        'etnia': np.random.choice(['AFRODESCENDIENTE', 'INDIGENA', 'NINGUNA', 'RAIZAL', 'PALENQUERO', 'GITANO'], 
                                n_samples, p=[0.1, 0.05, 0.8, 0.03, 0.015, 0.005]),
        'lectura_y_escritura': np.random.choice(['SI', 'NO'], n_samples, p=[0.95, 0.05]),
        'estudiante': np.random.choice(['SI', 'NO'], n_samples, p=[0.3, 0.7]),
        'nivel_educativo': np.random.choice(['BASICA PRIMARIA', 'BASICA SECUNDARIA', 'MEDIA', 'SUPERIOR', 'POSGRADO'], 
                                          n_samples, p=[0.2, 0.25, 0.3, 0.2, 0.05]),
        'p1': np.random.choice(['TRABAJANDO', 'ESTUDIANDO', 'OFICIOS DEL HOGAR', 'BUSCANDO TRABAJO', 'OTRA ACTIVIDAD'], 
                             n_samples, p=[0.5, 0.2, 0.15, 0.1, 0.05]),
        'p2': np.random.lognormal(13, 0.8, n_samples),  # Ingresos
        'p3': np.random.choice(['SI', 'NO'], n_samples, p=[0.3, 0.7]),
        'p4': np.random.choice(['SI', 'NO'], n_samples, p=[0.4, 0.6]),
        'p5': np.random.choice(['SI', 'NO'], n_samples, p=[0.35, 0.65]),
        'asistencia_biblioteca': np.random.choice(['SI', 'NO'], n_samples, p=[0.4, 0.6]),
        'asistencia_casas_de_cultura': np.random.choice(['SI', 'NO'], n_samples, p=[0.25, 0.75]),
        'asistencia_centros_culturales': np.random.choice(['SI', 'NO'], n_samples, p=[0.3, 0.7]),
        'asistencia_museos': np.random.choice(['SI', 'NO'], n_samples, p=[0.2, 0.8]),
        'asistencia_exposiciones': np.random.choice(['SI', 'NO'], n_samples, p=[0.15, 0.85]),
        'asistencia_monumentos': np.random.choice(['SI', 'NO'], n_samples, p=[0.35, 0.65]),
        'asistencia_cursos': np.random.choice(['SI', 'NO'], n_samples, p=[0.2, 0.8]),
        'practica_cultural': np.random.choice(['SI', 'NO'], n_samples, p=[0.45, 0.55]),
        'lee_libros': np.random.choice(['SI', 'NO'], n_samples, p=[0.6, 0.4]),
        'factor_expansion': np.random.uniform(80, 120, n_samples)  # Factor de expansi√≥n sint√©tico
    }
    
    df = pd.DataFrame(data)
    
    # A√±adir algunos valores nulos para mostrar la limpieza de datos
    df.loc[np.random.choice(df.index, int(n_samples * 0.05)), 'edad'] = np.nan
    df.loc[np.random.choice(df.index, int(n_samples * 0.03)), 'nivel_educativo'] = None
    df.loc[np.random.choice(df.index, int(n_samples * 0.02)), 'p2'] = np.nan
    
    return df

# Cargar datos
df_raw = load_and_process_data()

# P√ÅGINA: LIMPIEZA DE DATOS
if page == "üßπ Limpieza de Datos":
    st.markdown('<div class="section-header"><h2>üßπ Limpieza y Preparaci√≥n de Datos</h2></div>', unsafe_allow_html=True)
    
    # Antes de la limpieza
    st.subheader("An√°lisis Inicial de los Datos")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Dimensiones del Dataset Original:**", df_raw.shape)
        st.write("**Vista previa de los datos:**")
        st.dataframe(df_raw.head(5), use_container_width=True)
    
    with col2:
        st.write("**Resumen de valores nulos por columna:**")
        null_counts = df_raw.isnull().sum().sort_values(ascending=False)
        null_df = pd.DataFrame({
            'Columna': null_counts.index,
            'Valores Nulos': null_counts.values,
            'Porcentaje (%)': (null_counts.values / len(df_raw) * 100).round(2)
        })
        st.dataframe(null_df[null_df['Valores Nulos'] > 0], use_container_width=True)
    
    # Proceso de limpieza
    st.subheader("Proceso de Limpieza")
    
    # Creamos una copia para el proceso de limpieza
    df = df_raw.copy()
    
    # 1. Tratamiento de valores nulos
    st.markdown("**1Ô∏è‚É£ Tratamiento de Valores Nulos**")
    col1, col2 = st.columns(2)
    
    with col1:
        st.code("""
# Rellenar edad con la mediana
df['edad'] = df['edad'].fillna(df['edad'].median())

# Rellenar nivel educativo con la moda
df['nivel_educativo'] = df['nivel_educativo'].fillna(
    df['nivel_educativo'].mode()[0]
)

# Rellenar ingresos (p2) con la mediana por nivel educativo
mediana_por_educacion = df.groupby('nivel_educativo')['p2'].median()
for nivel in df['nivel_educativo'].unique():
    mask = (df['nivel_educativo'] == nivel) & (df['p2'].isna())
    df.loc[mask, 'p2'] = mediana_por_educacion[nivel]
        """)
    
    with col2:
        # Implementamos el c√≥digo mostrado
        df['edad'] = df['edad'].fillna(df['edad'].median())
        df['nivel_educativo'] = df['nivel_educativo'].fillna(df['nivel_educativo'].mode()[0])
        
        mediana_por_educacion = df.groupby('nivel_educativo')['p2'].median()
        for nivel in df['nivel_educativo'].unique():
            mask = (df['nivel_educativo'] == nivel) & (df['p2'].isna())
            df.loc[mask, 'p2'] = mediana_por_educacion[nivel]
        
        # Verificamos resultado
        null_counts_after = df.isnull().sum()
        st.write("**Valores nulos despu√©s de la limpieza:**", null_counts_after.sum())
    
    # 2. Procesamiento de variables
    st.markdown("**2Ô∏è‚É£ Procesamiento de Variables**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.code("""
# Convertir variables binarias
binary_cols = ['sexo', 'lectura_y_escritura', 'estudiante', 
               'p3', 'p4', 'p5', 'asistencia_biblioteca', 
               'asistencia_casas_de_cultura', 
               'asistencia_centros_culturales', 'asistencia_museos',
               'asistencia_exposiciones', 'asistencia_monumentos',
               'asistencia_cursos', 'practica_cultural', 'lee_libros']

for col in binary_cols:
    if col in df.columns:
        df[col + '_num'] = df[col].map({'SI': 1, 'NO': 0})

# Crear grupos de edad
df['grupo_edad'] = pd.cut(
    df['edad'], 
    bins=[0, 18, 30, 45, 60, 100], 
    labels=['Joven (15-18)', 'Adulto Joven (19-30)', 
           'Adulto (31-45)', 'Adulto Mayor (46-60)', 
           'Senior (60+)']
)

# Crear grupos de ingreso
df['grupo_ingreso'] = pd.qcut(
    df['p2'], 
    q=4, 
    labels=['Bajo', 'Medio-Bajo', 'Medio-Alto', 'Alto']
)
        """)
    
    with col2:
        # Implementamos el procesamiento
        binary_cols = ['sexo', 'lectura_y_escritura', 'estudiante', 'p3', 'p4', 'p5',
                   'asistencia_biblioteca', 'asistencia_casas_de_cultura', 
                   'asistencia_centros_culturales', 'asistencia_museos',
                   'asistencia_exposiciones', 'asistencia_monumentos',
                   'asistencia_cursos', 'practica_cultural', 'lee_libros']
    
        for col in binary_cols:
            if col in df.columns:
                df[col + '_num'] = df[col].map({'SI': 1, 'NO': 0})
        
        # Crear grupos de edad
        df['grupo_edad'] = pd.cut(df['edad'], 
                                bins=[0, 18, 30, 45, 60, 100], 
                                labels=['Joven (15-18)', 'Adulto Joven (19-30)', 
                                       'Adulto (31-45)', 'Adulto Mayor (46-60)', 'Senior (60+)'])
        
        # Crear grupos de ingreso
        df['grupo_ingreso'] = pd.qcut(df['p2'], 
                                    q=4, 
                                    labels=['Bajo', 'Medio-Bajo', 'Medio-Alto', 'Alto'])
        
        st.write("**Nuevas variables creadas:**")
        nuevas_vars = [col for col in df.columns if col not in df_raw.columns]
        st.write(", ".join(nuevas_vars))
    
    # 3. Creaci√≥n del √≠ndice cultural
    st.markdown("**3Ô∏è‚É£ Creaci√≥n de √çndices y Variables Derivadas**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.code("""
# Crear √≠ndice de participaci√≥n cultural
cultural_vars = ['p3_num', 'p4_num', 'p5_num', 
                 'asistencia_biblioteca_num',
                 'asistencia_casas_de_cultura_num', 
                 'asistencia_centros_culturales_num',
                 'asistencia_museos_num', 'asistencia_exposiciones_num',
                 'asistencia_monumentos_num', 'asistencia_cursos_num',
                 'practica_cultural_num', 'lee_libros_num']

df['indice_cultural'] = df[cultural_vars].sum(axis=1)
df['nivel_participacion'] = pd.cut(
    df['indice_cultural'], 
    bins=[-1, 2, 5, 8, 12], 
    labels=['Bajo', 'Medio', 'Alto', 'Muy Alto']
)
        """)
    
    with col2:
        # Implementamos la creaci√≥n del √≠ndice
        cultural_vars = ['p3_num', 'p4_num', 'p5_num', 'asistencia_biblioteca_num',
                    'asistencia_casas_de_cultura_num', 'asistencia_centros_culturales_num',
                    'asistencia_museos_num', 'asistencia_exposiciones_num',
                    'asistencia_monumentos_num', 'asistencia_cursos_num',
                    'practica_cultural_num', 'lee_libros_num']
    
        df['indice_cultural'] = df[cultural_vars].sum(axis=1)
        df['nivel_participacion'] = pd.cut(df['indice_cultural'], 
                                         bins=[-1, 2, 5, 8, 12], 
                                         labels=['Bajo', 'Medio', 'Alto', 'Muy Alto'])
        
        # Mostrar distribuci√≥n del √≠ndice cultural
        fig = px.histogram(df, x='indice_cultural', 
                         color='nivel_participacion',
                         color_discrete_sequence=get_purple_palette(4),
                         title="Distribuci√≥n del √çndice Cultural")
        fig.update_layout(xaxis_title="√çndice de Participaci√≥n Cultural",
                        yaxis_title="Frecuencia",
                        bargap=0.2)
        st.plotly_chart(fig, use_container_width=True)
    
    # Resumen final
    st.subheader("Resumen del Proceso de Limpieza")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **Acciones realizadas:**
        
        ‚úÖ Identificaci√≥n y tratamiento de valores nulos
        ‚úÖ Conversi√≥n de variables categ√≥ricas a num√©ricas
        ‚úÖ Creaci√≥n de variables derivadas por agrupaci√≥n
        ‚úÖ Construcci√≥n del √≠ndice de participaci√≥n cultural
        ‚úÖ Aplicaci√≥n de factor de expansi√≥n para an√°lisis ponderados
        """)
    
    with col2:
        st.write("**Dataset final:**", df.shape)
        st.write("**Calidad de los datos:**")
        # Verificaci√≥n de calidad de datos
        calidad_data = {
            'M√©trica': ['Registros Totales', 'Columnas Totales', 'Valores Faltantes', 'Completitud de Datos'],
            'Valor': [df.shape[0], df.shape[1], df.isnull().sum().sum(), f"{100 - (df.isnull().sum().sum() / (df.shape[0] * df.shape[1]) * 100):.2f}%"]
        }
        st.dataframe(pd.DataFrame(calidad_data), use_container_width=True)
else:
    # Para el resto de p√°ginas, usamos los datos procesados
    # Procesamiento b√°sico de datos (para asegurar que todas las variables existan)
    df = df_raw.copy()
    
    # Convertir variables binarias
    binary_cols = ['sexo', 'lectura_y_escritura', 'estudiante', 'p3', 'p4', 'p5',
                   'asistencia_biblioteca', 'asistencia_casas_de_cultura', 
                   'asistencia_centros_culturales', 'asistencia_museos',
                   'asistencia_exposiciones', 'asistencia_monumentos',
                   'asistencia_cursos', 'practica_cultural', 'lee_libros']
    
    for col in binary_cols:
        if col in df.columns:
            df[col + '_num'] = df[col].map({'SI': 1, 'NO': 0})
    
    # Crear grupos de edad
    df['grupo_edad'] = pd.cut(df['edad'], 
                             bins=[0, 18, 30, 45, 60, 100], 
                             labels=['Joven (15-18)', 'Adulto Joven (19-30)', 
                                   'Adulto (31-45)', 'Adulto Mayor (46-60)', 'Senior (60+)'])
    
    # Crear grupos de ingreso
    df['grupo_ingreso'] = pd.qcut(df['p2'], 
                                 q=4, 
                                 labels=['Bajo', 'Medio-Bajo', 'Medio-Alto', 'Alto'])
    
    # Crear √≠ndice de participaci√≥n cultural
    cultural_vars = ['p3_num', 'p4_num', 'p5_num', 'asistencia_biblioteca_num',
                    'asistencia_casas_de_cultura_num', 'asistencia_centros_culturales_num',
                    'asistencia_museos_num', 'asistencia_exposiciones_num',
                    'asistencia_monumentos_num', 'asistencia_cursos_num',
                    'practica_cultural_num', 'lee_libros_num']
    
    df['indice_cultural'] = df[cultural_vars].sum(axis=1)
    df['nivel_participacion'] = pd.cut(df['indice_cultural'], 
                                      bins=[-1, 2, 5, 8, 12], 
                                      labels=['Bajo', 'Medio', 'Alto', 'Muy Alto'])

# P√ÅGINA: RESUMEN EJECUTIVO
if page == "üìä Resumen Ejecutivo":
    st.markdown('<div class="section-header"><h2>üìä Resumen Ejecutivo</h2></div>', unsafe_allow_html=True)
    
    # M√©tricas principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("Total Participantes", f"{len(df):,}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        participation_rate = (df['indice_cultural'] > 3).mean() * 100
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("Participaci√≥n Cultural", f"{participation_rate:.1f}%")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        avg_age = df['edad'].mean()
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("Edad Promedio", f"{avg_age:.1f} a√±os")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col4:
        reading_rate = (df['lee_libros'] == 'SI').mean() * 100
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("H√°bito de Lectura", f"{reading_rate:.1f}%")
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Gr√°ficos principales
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        st.subheader("üé≠ Distribuci√≥n por Nivel de Participaci√≥n Cultural")
        participation_counts = df['nivel_participacion'].value_counts()
        colors = get_purple_palette(len(participation_counts))
        
        fig = px.pie(values=participation_counts.values, 
                    names=participation_counts.index,
                    color_discrete_sequence=colors,
                    hole=0.4)
        fig.update_layout(font=dict(size=12))
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        st.subheader("üë• Distribuci√≥n por G√©nero y Edad")
        fig = px.histogram(df, x='grupo_edad', color='sexo',
                          barmode='group',
                          color_discrete_sequence=['#6a0dad', '#ba55d3'],
                          title="")
        fig.update_layout(
            xaxis_title="Grupo de Edad",
            yaxis_title="N√∫mero de Personas",
            font=dict(size=12)
        )
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Top actividades culturales
    st.markdown('<div class="plot-container">', unsafe_allow_html=True)
    st.subheader("üèÜ Top 10 Actividades Culturales M√°s Populares")
    
    activities = {
        'Lectura de Libros': (df['lee_libros'] == 'SI').mean(),
        'Pr√°ctica Cultural': (df['practica_cultural'] == 'SI').mean(),
        'Asistencia a Bibliotecas': (df['asistencia_biblioteca'] == 'SI').mean(),
        'Conciertos/M√∫sica en Vivo': (df['p4'] == 'SI').mean(),
        'Monumentos Hist√≥ricos': (df['asistencia_monumentos'] == 'SI').mean(),
        'Teatro/√ìpera/Danza': (df['p3'] == 'SI').mean(),
        'Centros Culturales': (df['asistencia_centros_culturales'] == 'SI').mean(),
        'Casas de Cultura': (df['asistencia_casas_de_cultura'] == 'SI').mean(),
        'Cursos/Talleres': (df['asistencia_cursos'] == 'SI').mean(),
        'Museos': (df['asistencia_museos'] == 'SI').mean()
    }
    
    activities_df = pd.DataFrame(list(activities.items()), columns=['Actividad', 'Porcentaje'])
    activities_df = activities_df.sort_values('Porcentaje', ascending=True)
    activities_df['Porcentaje'] *= 100
    
    fig = px.bar(activities_df, x='Porcentaje', y='Actividad',
                orientation='h',
                color='Porcentaje',
                color_continuous_scale='Purples',
                title="")
    fig.update_layout(
        xaxis_title="Porcentaje de Participaci√≥n (%)",
        yaxis_title="",
        font=dict(size=12),
        height=500
    )
    st.plotly_chart(fig, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)

# P√ÅGINA: ESTAD√çSTICAS DESCRIPTIVAS
elif page == "üìà Estad√≠sticas Descriptivas":
    st.markdown('<div class="section-header"><h2>üìà Estad√≠sticas Descriptivas y Exploratorias</h2></div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã Resumen Estad√≠stico - Variables Num√©ricas")
        
        # Seleccionar variables num√©ricas de inter√©s
        numeric_vars = ['edad', 'p2', 'indice_cultural']
        
        # Crear tabla de resumen estad√≠stico
        stats_df = df[numeric_vars].describe().T
        
        # Agregar estad√≠sticas adicionales
        stats_df['mediana'] = df[numeric_vars].median()
        stats_df['moda'] = df[numeric_vars].mode().iloc[0]
        stats_df['asimetria'] = df[numeric_vars].skew()
        stats_df['curtosis'] = df[numeric_vars].kurtosis()
        
        # Renombrar las columnas para mejor presentaci√≥n
        stats_df = stats_df.rename(columns={
            'count': 'Conteo',
            'mean': 'Media',
            'std': 'Desv. Est√°ndar',
            'min': 'M√≠nimo',
            '25%': 'Q1 (25%)',
            '50%': 'Q2 (50%)',
            '75%': 'Q3 (75%)',
            'max': 'M√°ximo',
            'mediana': 'Mediana',
            'moda': 'Moda',
            'asimetria': 'Asimetr√≠a',
            'curtosis': 'Curtosis'
        })
        
        # Renombrar √≠ndices para mejor presentaci√≥n
        new_index = {
            'edad': 'Edad (a√±os)',
            'p2': 'Ingresos',
            'indice_cultural': '√çndice Cultural'
        }
        stats_df.index = [new_index.get(idx, idx) for idx in stats_df.index]
        
        # Mostrar tabla con formato
        st.dataframe(stats_df, use_container_width=True)
    
    with col2:
        st.subheader("üìä Resumen Estad√≠stico - Variables Categ√≥ricas")
        
        # Seleccionar variables categ√≥ricas de inter√©s
        cat_vars = ['sexo', 'nivel_educativo', 'etnia', 'grupo_edad']
        
        # Crear dataframe para almacenar estad√≠sticas
        cat_stats = []
        
        for var in cat_vars:
            # Contar frecuencias
            counts = df[var].value_counts()
            # Calcular porcentajes
            percentages = df[var].value_counts(normalize=True) * 100
            
            # Encontrar moda (valor m√°s frecuente)
            mode_val = counts.index[0]
            mode_count = counts.iloc[0]
            mode_pct = percentages.iloc[0]

# Crear diccionario con estad√≠sticas
            stats = {
                'Variable': var,
                'Categor√≠as': len(counts),
                'Moda': mode_val,
                'Frecuencia Moda': mode_count,
                'Porcentaje Moda (%)': round(mode_pct, 2),
                'Categor√≠a Menos Frecuente': counts.index[-1],
                'Frecuencia M√≠nima': counts.iloc[-1],
                'Porcentaje M√≠nimo (%)': round(percentages.iloc[-1], 2)
            }
            
            cat_stats.append(stats)
        
        # Convertir a DataFrame
        cat_stats_df = pd.DataFrame(cat_stats)
        
        # Mostrar tabla con formato
        st.dataframe(cat_stats_df, use_container_width=True)
    
    # Visualizaci√≥n de distribuciones
    st.subheader("üìâ Distribuciones de Variables Clave")
    
    dist_tab1, dist_tab2 = st.tabs(["üìä Variables Num√©ricas", "üîÑ Variables Categ√≥ricas"])
    
    with dist_tab1:
        # Seleccionar variable num√©rica para visualizar
        num_var = st.selectbox(
            "Selecciona una variable num√©rica:",
            options=["edad", "p2", "indice_cultural"],
            format_func=lambda x: {
                "edad": "Edad (a√±os)",
                "p2": "Ingresos",
                "indice_cultural": "√çndice de Participaci√≥n Cultural"
            }.get(x, x)
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Histograma
            st.markdown('<div class="plot-container">', unsafe_allow_html=True)
            fig = px.histogram(df, x=num_var, 
                              title=f"Histograma de {num_var.replace('_', ' ').title()}",
                              color_discrete_sequence=['#6a0dad'])
            fig.update_layout(bargap=0.2)
            st.plotly_chart(fig, use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            # Boxplot
            st.markdown('<div class="plot-container">', unsafe_allow_html=True)
            fig = px.box(df, y=num_var, 
                        title=f"Boxplot de {num_var.replace('_', ' ').title()}",
                        color_discrete_sequence=['#6a0dad'])
            st.plotly_chart(fig, use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)
    
    with dist_tab2:
        # Seleccionar variable categ√≥rica para visualizar
        cat_var = st.selectbox(
            "Selecciona una variable categ√≥rica:",
            options=["sexo", "nivel_educativo", "etnia", "grupo_edad", "nivel_participacion"],
            format_func=lambda x: {
                "sexo": "G√©nero",
                "nivel_educativo": "Nivel Educativo",
                "etnia": "Etnia",
                "grupo_edad": "Grupo de Edad",
                "nivel_participacion": "Nivel de Participaci√≥n Cultural"
            }.get(x, x)
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Gr√°fico de barras
            st.markdown('<div class="plot-container">', unsafe_allow_html=True)
            counts = df[cat_var].value_counts().reset_index()
            counts.columns = [cat_var, 'Conteo']
            
            fig = px.bar(counts, x=cat_var, y='Conteo',
                        title=f"Frecuencia de {cat_var.replace('_', ' ').title()}",
                        color=cat_var,
                        color_discrete_sequence=get_purple_palette(len(counts)))
            st.plotly_chart(fig, use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            # Gr√°fico de pastel
            st.markdown('<div class="plot-container">', unsafe_allow_html=True)
            fig = px.pie(counts, names=cat_var, values='Conteo',
                        title=f"Distribuci√≥n de {cat_var.replace('_', ' ').title()}",
                        color=cat_var,
                        color_discrete_sequence=get_purple_palette(len(counts)))
            fig.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)
    
    # An√°lisis de Correlaciones
    st.subheader("üîÑ Matriz de Correlaciones")
    
    # Seleccionar variables num√©ricas relevantes
    corr_vars = ['edad', 'p2', 'indice_cultural'] + [col for col in df.columns if col.endswith('_num')]
    
    # Crear matriz de correlaci√≥n
    corr_matrix = df[corr_vars].corr()
    
    # Seleccionar el tipo de gr√°fico de correlaci√≥n
    corr_type = st.radio(
        "Tipo de visualizaci√≥n:",
        ["Mapa de Calor", "Matriz Cuadr√≠cula"],
        horizontal=True
    )
    
    if corr_type == "Mapa de Calor":
        # Visualizar como mapa de calor
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        fig = px.imshow(corr_matrix, 
                       text_auto='.2f',
                       color_continuous_scale='RdBu_r',
                       title="Matriz de Correlaci√≥n - Variables Num√©ricas")
        fig.update_layout(width=800, height=700)
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    else:
        # Visualizar como matriz de cuadr√≠cula
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        # Crear figura con subplots
        fig = make_subplots(rows=len(corr_vars), cols=len(corr_vars),
                           shared_xaxes=True, shared_yaxes=True,
                           horizontal_spacing=0.01, vertical_spacing=0.01)
        
        # A√±adir scatter plots para cada par de variables
        for i, var1 in enumerate(corr_vars):
            for j, var2 in enumerate(corr_vars):
                corr_val = corr_matrix.iloc[i, j]
                color = 'rgba(186, 85, 211, ' + str(abs(corr_val)) + ')'
                
                fig.add_trace(
                    go.Scatter(
                        x=[0, 1],
                        y=[0, 1],
                        mode='markers',
                        marker=dict(
                            size=30,
                            color=color,
                            symbol='square',
                            line=dict(color='white', width=1)
                        ),
                        showlegend=False,
                        text=f"{corr_val:.2f}"
                    ),
                    row=i+1, col=j+1
                )
                
                # A√±adir texto de correlaci√≥n
                fig.add_annotation(
                    x=0.5, y=0.5,
                    text=f"{corr_val:.2f}",
                    showarrow=False,
                    row=i+1, col=j+1
                )
        
        # Actualizar layout
        fig.update_layout(
            width=800, height=800,
            title="Matriz de Correlaci√≥n - Variables Num√©ricas"
        )
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Texto explicativo
    st.markdown("""
    **Interpretaci√≥n de la Matriz de Correlaci√≥n:**
    
    * **Correlaci√≥n positiva (>0)**: Cuando una variable aumenta, la otra tambi√©n tiende a aumentar.
    * **Correlaci√≥n negativa (<0)**: Cuando una variable aumenta, la otra tiende a disminuir.
    * **Correlaci√≥n fuerte**: Valores cercanos a 1 o -1.
    * **Correlaci√≥n d√©bil**: Valores cercanos a 0.
    """)

# P√ÅGINA: AN√ÅLISIS DEMOGR√ÅFICO
elif page == "üîç An√°lisis Demogr√°fico":
    st.markdown('<div class="section-header"><h2>üîç An√°lisis Demogr√°fico</h2></div>', unsafe_allow_html=True)
    
    # Filtro por grupos demogr√°ficos
    st.sidebar.markdown("### üë• Filtros Demogr√°ficos")
    
    # Filtro por g√©nero
    selected_gender = st.sidebar.multiselect(
        "Filtrar por g√©nero:",
        options=df['sexo'].unique(),
        default=df['sexo'].unique()
    )
    
    # Filtro por grupo de edad
    selected_age = st.sidebar.multiselect(
        "Filtrar por grupo de edad:",
        options=df['grupo_edad'].unique(),
        default=df['grupo_edad'].unique()
    )
    
    # Filtro por nivel educativo
    selected_education = st.sidebar.multiselect(
        "Filtrar por nivel educativo:",
        options=df['nivel_educativo'].unique(),
        default=df['nivel_educativo'].unique()
    )
    
    # Aplicar filtros
    filtered_df = df[
        df['sexo'].isin(selected_gender) &
        df['grupo_edad'].isin(selected_age) &
        df['nivel_educativo'].isin(selected_education)
    ]
    
    # Mostrar n√∫mero de registros filtrados
    st.sidebar.markdown(f"**Registros seleccionados:** {len(filtered_df):,}")
    
    # An√°lisis demogr√°fico
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üöª Distribuci√≥n por G√©nero")
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        
        gender_counts = filtered_df['sexo'].value_counts()
        gender_pcts = filtered_df['sexo'].value_counts(normalize=True) * 100
        
        gender_df = pd.DataFrame({
            'G√©nero': gender_counts.index,
            'Conteo': gender_counts.values,
            'Porcentaje': gender_pcts.values
        })
        
        fig = px.pie(gender_df, names='G√©nero', values='Conteo',
                    color='G√©nero',
                    color_discrete_sequence=['#6a0dad', '#9370db'],
                    title="Distribuci√≥n por G√©nero")
        
        fig.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.subheader("üë¥üë© Distribuci√≥n por Grupo de Edad")
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        
        age_counts = filtered_df['grupo_edad'].value_counts().reset_index()
        age_counts.columns = ['Grupo de Edad', 'Conteo']
        
        # Ordenar las categor√≠as de edad para visualizaci√≥n
        correct_order = ['Joven (15-18)', 'Adulto Joven (19-30)', 'Adulto (31-45)', 
                         'Adulto Mayor (46-60)', 'Senior (60+)']
        age_counts['Grupo de Edad'] = pd.Categorical(
            age_counts['Grupo de Edad'], 
            categories=correct_order, 
            ordered=True
        )
        age_counts = age_counts.sort_values('Grupo de Edad')
        
        fig = px.bar(age_counts, x='Grupo de Edad', y='Conteo',
                    color='Grupo de Edad',
                    color_discrete_sequence=get_purple_palette(len(age_counts)),
                    title="Distribuci√≥n por Grupo de Edad")
        
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üéì Distribuci√≥n por Nivel Educativo")
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        
        edu_counts = filtered_df['nivel_educativo'].value_counts()
        
        # Ordenar niveles educativos para mejor visualizaci√≥n
        education_order = ['BASICA PRIMARIA', 'BASICA SECUNDARIA', 'MEDIA', 'SUPERIOR', 'POSGRADO']
        edu_counts = edu_counts.reindex(education_order)
        
        fig = px.bar(x=edu_counts.index, y=edu_counts.values,
                    color=edu_counts.index,
                    color_discrete_sequence=get_purple_palette(len(edu_counts)),
                    labels={'x': 'Nivel Educativo', 'y': 'Conteo'},
                    title="Distribuci√≥n por Nivel Educativo")
        
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.subheader("üë• Distribuci√≥n por Etnia")
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        
        ethnicity_counts = filtered_df['etnia'].value_counts().reset_index()
        ethnicity_counts.columns = ['Etnia', 'Conteo']
        
        fig = px.pie(ethnicity_counts, names='Etnia', values='Conteo',
                    color='Etnia',
                    color_discrete_sequence=get_purple_palette(len(ethnicity_counts)),
                    title="Distribuci√≥n por Etnia")
        
        fig.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # An√°lisis cruzado de variables demogr√°ficas
    st.subheader("üìä An√°lisis Cruzado de Variables Demogr√°ficas")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Selectores para variables a cruzar
        var1 = st.selectbox(
            "Primera variable demogr√°fica:",
            options=["sexo", "grupo_edad", "nivel_educativo", "etnia"],
            format_func=lambda x: {
                "sexo": "G√©nero", 
                "grupo_edad": "Grupo de Edad",
                "nivel_educativo": "Nivel Educativo",
                "etnia": "Etnia"
            }.get(x, x)
        )
    
    with col2:
        var2 = st.selectbox(
            "Segunda variable demogr√°fica:",
            options=["nivel_educativo", "grupo_edad", "sexo", "etnia"],
            format_func=lambda x: {
                "sexo": "G√©nero", 
                "grupo_edad": "Grupo de Edad",
                "nivel_educativo": "Nivel Educativo",
                "etnia": "Etnia"
            }.get(x, x)
        )
    
    # Crear gr√°fico cruzado
    st.markdown('<div class="plot-container">', unsafe_allow_html=True)
    
    # Crear tabla de contingencia
    cross_table = pd.crosstab(filtered_df[var1], filtered_df[var2])
    
    # Visualizar
    fig = px.imshow(cross_table,
                   labels=dict(x=var2.replace('_', ' ').title(), y=var1.replace('_', ' ').title(), color='Frecuencia'),
                   color_continuous_scale='Purples',
                   title=f"Frecuencia Cruzada: {var1.replace('_', ' ').title()} vs {var2.replace('_', ' ').title()}")
    
    fig.update_layout(width=800, height=600)
    st.plotly_chart(fig, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Visualizaci√≥n de la distribuci√≥n del √≠ndice cultural por demograf√≠a
    st.subheader("üìà √çndice Cultural por Grupos Demogr√°ficos")
    
    # Selector de variable demogr√°fica
    demographic_var = st.selectbox(
        "Selecciona una variable demogr√°fica para analizar:",
        options=["sexo", "grupo_edad", "nivel_educativo", "etnia"],
        format_func=lambda x: {
            "sexo": "G√©nero", 
            "grupo_edad": "Grupo de Edad",
            "nivel_educativo": "Nivel Educativo",
            "etnia": "Etnia"
        }.get(x, x)
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Boxplot por grupo demogr√°fico
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        fig = px.box(filtered_df, x=demographic_var, y='indice_cultural',
                    color=demographic_var,
                    color_discrete_sequence=get_purple_palette(
                        len(filtered_df[demographic_var].unique())
                    ),
                    title=f"Distribuci√≥n del √çndice Cultural por {demographic_var.replace('_', ' ').title()}")
        
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        # Promedio del √≠ndice cultural por grupo demogr√°fico
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        
        avg_by_group = filtered_df.groupby(demographic_var)['indice_cultural'].mean().reset_index()
        avg_by_group.columns = [demographic_var, 'Promedio √çndice Cultural']
        
        fig = px.bar(avg_by_group, x=demographic_var, y='Promedio √çndice Cultural',
                    color=demographic_var,
                    color_discrete_sequence=get_purple_palette(len(avg_by_group)),
                    title=f"Promedio del √çndice Cultural por {demographic_var.replace('_', ' ').title()}")
        
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Conclusiones demogr√°ficas
    st.subheader("üìù Hallazgos Demogr√°ficos Principales")
    
    # Calcular algunos hallazgos
    highest_edu_group = filtered_df.groupby('nivel_educativo')['indice_cultural'].mean().idxmax()
    highest_age_group = filtered_df.groupby('grupo_edad')['indice_cultural'].mean().idxmax()
    gender_diff = filtered_df.groupby('sexo')['indice_cultural'].mean()
    
    st.markdown(f"""
    * **Nivel Educativo**: El grupo con mayor √≠ndice de participaci√≥n cultural es "{highest_edu_group}".
    * **Grupo de Edad**: El grupo con mayor participaci√≥n cultural es "{highest_age_group}".
    * **G√©nero**: La diferencia en participaci√≥n cultural entre hombres y mujeres es de {abs(gender_diff.iloc[0] - gender_diff.iloc[1]):.2f} puntos.
    * **Diversidad √âtnica**: Los patrones de participaci√≥n cultural var√≠an entre grupos √©tnicos, reflejando diferentes tradiciones y accesos.
    """)

# P√ÅGINA: PARTICIPACI√ìN CULTURAL
elif page == "üé™ Participaci√≥n Cultural":
    st.markdown('<div class="section-header"><h2>üé™ An√°lisis de Participaci√≥n Cultural</h2></div>', unsafe_allow_html=True)
    
    # Filtro por nivel de participaci√≥n
    st.sidebar.markdown("### üé≠ Filtros de Participaci√≥n")
    
    # Filtro por nivel de participaci√≥n
    selected_participation = st.sidebar.multiselect(
        "Filtrar por nivel de participaci√≥n:",
        options=df['nivel_participacion'].unique(),
        default=df['nivel_participacion'].unique()
    )
    
    # Filtro por √≠ndice cultural
    min_index, max_index = st.sidebar.slider(
        "Rango de √çndice Cultural:",
        min_value=0, max_value=12, value=(0, 12)
    )
    
    # Aplicar filtros
    filtered_df = df[
        df['nivel_participacion'].isin(selected_participation) &
        (df['indice_cultural'] >= min_index) &
        (df['indice_cultural'] <= max_index)
    ]
    
    # Mostrar n√∫mero de registros filtrados
    st.sidebar.markdown(f"**Registros seleccionados:** {len(filtered_df):,}")
    
    # Distribuci√≥n general del √≠ndice cultural
    st.subheader("üìä Distribuci√≥n General del √çndice Cultural")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        fig = px.histogram(filtered_df, x='indice_cultural', 
                          color='nivel_participacion',
                          color_discrete_sequence=get_purple_palette(
                              len(filtered_df['nivel_participacion'].unique())
                          ),
                          title="Distribuci√≥n del √çndice Cultural")
        
        fig.update_layout(xaxis_title="√çndice Cultural",
                         yaxis_title="Frecuencia",
                         bargap=0.2)
        
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        fig = px.pie(filtered_df, names='nivel_participacion',
                    color='nivel_participacion',
                    color_discrete_sequence=get_purple_palette(
                        len(filtered_df['nivel_participacion'].unique())
                    ),
                    title="Distribuci√≥n por Nivel de Participaci√≥n")
        
        fig.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # An√°lisis comparativo por variables demogr√°ficas
    st.subheader("üîÑ Participaci√≥n Cultural por Variables Demogr√°ficas")
    
    # Seleccionar variable para comparar
    compare_var = st.selectbox(
        "Comparar nivel de participaci√≥n cultural por:",
        options=["sexo", "grupo_edad", "nivel_educativo", "etnia", "grupo_ingreso"],
        format_func=lambda x: {
            "sexo": "G√©nero", 
            "grupo_edad": "Grupo de Edad",
            "nivel_educativo": "Nivel Educativo",
            "etnia": "Etnia",
            "grupo_ingreso": "Nivel de Ingresos"
        }.get(x, x)
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de barras apiladas
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        
        participation_crosstab = pd.crosstab(
            filtered_df[compare_var],
            filtered_df['nivel_participacion'],
            normalize='index'
        ) * 100
        
        participation_crosstab = participation_crosstab.reset_index()
        participation_crosstab_melted = pd.melt(
            participation_crosstab, 
            id_vars=[compare_var],
            var_name='Nivel de Participaci√≥n',
            value_name='Porcentaje'
        )
        
        fig = px.bar(participation_crosstab_melted, 
                    x=compare_var, 
                    y='Porcentaje',
                    color='Nivel de Participaci√≥n',
                    color_discrete_sequence=get_purple_palette(
                        len(filtered_df['nivel_participacion'].unique())
                    ),
                    title=f"Niveles de Participaci√≥n por {compare_var.replace('_', ' ').title()}")
        
        fig.update_layout(yaxis_title="Porcentaje (%)", barmode='stack')
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        # Promedio del √≠ndice cultural por grupo
        st.markdown('<div class="plot-container">', unsafe_allow_html=True)
        
        avg_by_group = filtered_df.groupby(compare_var)['indice_cultural'].mean().reset_index()
        avg_by_group.columns = [compare_var, 'Promedio √çndice Cultural']
        
        fig = px.bar(avg_by_group, 
                    x=compare_var, 
                    y='Promedio √çndice Cultural',
                    color=compare_var,
                    color_discrete_sequence=get_purple_palette(len(avg_by_group)),
                    title=f"Promedio del √çndice Cultural por {compare_var.replace('_', ' ').title()}")
        
        fig.update_layout(yaxis_title="√çndice Cultural Promedio")
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # An√°lisis de factores que influyen en la participaci√≥n cultural
    st.subheader("üîç Factores de Influencia en la Participaci√≥n Cultural")
    
    # Crear un heatmap de correlaci√≥n entre variables demogr√°ficas e √≠ndice cultural
    st.markdown('<div class="plot-container">', unsafe_allow_html=True)
    
    # Seleccionar variables categ√≥ricas relevantes y convertirlas en dummies
    cat_vars = ['sexo', 'grupo_edad', 'nivel_educativo', 'etnia', 'grupo_ingreso']
    df_dummies = pd.get_dummies(filtered_df[cat_vars])
    
    # A√±adir el √≠ndice cultural
    df_dummies['indice_cultural'] = filtered_df['indice_cultural']
    
    # Calcular correlaciones con el √≠ndice cultural
    corr_with_index = df_dummies.corr()['indice_cultural'].sort_values(ascending=False)
    
    # Eliminar la autocorrelaci√≥n
    corr_with_index = corr_with_index[corr_with_index.index != 'indice_cultural']
    
    # Tomar las top 10 correlaciones
    top_corr = corr_with_index.head(10)
    bottom_corr = corr_with_index.tail(10)
    
    fig = make_subplots(rows=1, cols=2, subplot_titles=("Factores con Correlaci√≥n Positiva", "Factores con Correlaci√≥n Negativa"))
    
    # Gr√°fico de correlaciones positivas
    fig.add_trace(
        go.Bar(
            y=top_corr.index,
            x=top_corr.values,
            orientation='h',
            marker_color='rgba(106, 13, 173, 0.7)',
            name="Correlaci√≥n Positiva"
        ),
        row=1, col=1
    )
    
    # Gr√°fico de correlaciones negativas
    fig.add_trace(
        go.Bar(
            y=bottom_corr.index,
            x=bottom_corr.values,
            orientation='h',
            marker_color='rgba(221, 160, 221, 0.7)',
            name="Correlaci√≥n Negativa"
        ),
        row=1, col=2
    )
    
    fig.update_layout(
        title="Factores que Influyen en el √çndice de Participaci√≥n Cultural",
        height=600
    )
    
    st.plotly_chart(fig, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Mapa de calor de actividades culturales
    st.subheader("üé® Matriz de Relaci√≥n entre Actividades Culturales")
    
    st.markdown('<div class="plot-container">', unsafe_allow_html=True)
    
    # Seleccionar columnas de actividades culturales
    activity_cols = [
        'asistencia_biblioteca_num', 'asistencia_casas_de_cultura_num',
        'asistencia_centros_culturales_num', 'asistencia_museos_num',
        'asistencia_exposiciones_num', 'asistencia_monumentos_num',
        'asistencia_cursos_num', 'practica_cultural_num', 'lee_libros_num',
        'p3_num', 'p4_num', 'p5_num'
    ]
    
    # Crear matriz de correlaci√≥n
    activity_corr = filtered_df[activity_cols].corr()
    
    # Renombrar columnas para mejor visualizaci√≥n
    activity_names = {
        'asistencia_biblioteca_num': 'Biblioteca',
        'asistencia_casas_de_cultura_num': 'Casas de Cultura',
        'asistencia_centros_culturales_num': 'Centros Culturales',
        'asistencia_museos_num': 'Museos',
        'asistencia_exposiciones_num': 'Exposiciones',
        'asistencia_monumentos_num': 'Monumentos',
        'asistencia_cursos_num': 'Cursos/Talleres',
        'practica_cultural_num': 'Pr√°ctica Cultural',
        'lee_libros_num': 'Lectura',
        'p3_num': 'Teatro/Danza',
        'p4_num': 'Conciertos',
        'p5_num': 'Otra Actividad'
    }
    
    activity_corr.columns = [activity_names.get(col, col) for col in activity_corr.columns]
    activity_corr.index = [activity_names.get(idx, idx) for idx in activity_corr.index]
    
    # Visualizar matriz de correl

# Visualizar matriz de correlaci√≥n
    fig = px.imshow(
        activity_corr,
        text_auto='.2f',
        color_continuous_scale='RdBu_r',
        title="Correlaci√≥n entre Actividades Culturales"
    )
    
    fig.update_layout(width=800, height=700)
    st.plotly_chart(fig, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # An√°lisis por tipo de actividad
    st.subheader("üìä Participaci√≥n por Tipo de Actividad Cultural")
    
    # Preparar datos de actividades culturales
    activity_data = pd.DataFrame({
        'Actividad': list(activity_names.values()),
        'Participaci√≥n': [filtered_df[col].mean() for col in activity_cols]
    })
    
    activity_data = activity_data.sort_values('Participaci√≥n', ascending=False)
    
    # Visualizar participaci√≥n por actividad
    st.markdown('<div class="plot-container">', unsafe_allow_html=True)
    fig = px.bar(
        activity_data,
        x='Actividad',
        y='Participaci√≥n',
        color='Actividad',
        color_discrete_sequence=get_purple_palette(len(activity_data)),
        title="Participaci√≥n Promedio por Tipo de Actividad Cultural"
    )
    
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Conclusiones sobre participaci√≥n cultural
    st.subheader("üìù Hallazgos sobre Participaci√≥n Cultural")
    
    # Calcular algunos hallazgos
    top_activity = activity_data.iloc[0]['Actividad']
    bottom_activity = activity_data.iloc[-1]['Actividad']
    highest_group = filtered_df.groupby('nivel_educativo')['indice_cultural'].mean().idxmax()
    
    st.markdown(f"""
    * **Actividad m√°s popular**: La actividad con mayor nivel de participaci√≥n es "{top_activity}".
    * **Actividad menos popular**: La actividad con menor nivel de participaci√≥n es "{bottom_activity}".
    * **Grupo con mayor participaci√≥n**: El grupo con mayor √≠ndice cultural es el de nivel educativo "{highest_group}".
    * **Factores de influencia**: Se observa una correlaci√≥n entre nivel educativo y participaci√≥n cultural.
    * **Relaci√≥n entre actividades**: Existen patrones de correlaci√≥n entre ciertos tipos de actividades culturales.
    """)

# P√ÅGINA: BARRERAS DE ACCESO
elif page == "üöß Barreras de Acceso":
    st.markdown('<div class="section-header"><h2>üöß An√°lisis de Barreras de Acceso</h2></div>', unsafe_allow_html=True)
    
    # Filtros laterales
    st.sidebar.markdown("### üîç Filtros de An√°lisis")
    
    # Filtro por nivel de participaci√≥n
    selected_barrier_participation = st.sidebar.multiselect(
        "Filtrar por nivel de participaci√≥n:",
        options=df['nivel_participacion'].unique(),
        default=df['nivel_participacion'].unique()
    )
    
    # Filtro por nivel educativo
    selected_barrier_education = st.sidebar.multiselect(
        "Filtrar por nivel educativo:",
        options=df['nivel_educativo'].unique(),
        default=df['nivel_educativo'].unique()
    )
    
    # Aplicar filtros
    filtered_df = df[
        df['nivel_participacion'].isin(selected_barrier_participation) &
        df['nivel_educativo'].isin(selected_barrier_education)
    ]
    
    # Mostrar n√∫mero de registros filtrados
    st.sidebar.markdown(f"**Registros seleccionados:** {len(filtered_df):,}")
    
    # Definir barreras de acceso
    barriers = {
        'barrera_falta_tiempo': 'Falta de tiempo',
        'barrera_falta_dinero': 'Falta de dinero',
        'barrera_no_hay_actividades': 'Ausencia de oferta cultural',
        'barrera_falta_informacion': 'Falta de informaci√≥n',
        'barrera_transporte': 'Problemas de transporte',
        'barrera_seguridad': 'Problemas de seguridad',
        'barrera_no_interesa': 'Falta de inter√©s',
        'barrera_responsabilidades_familiares': 'Responsabilidades familiares'
    }
    
    # An√°lisis general de barreras
    st.subheader("üìä Incidencia General de Barreras")
    
    # Preparar datos de barreras
    barrier_data = pd.DataFrame({
        'Barrera': list(barriers.values()),
        'Porcentaje': [filtered_df[col].mean() * 100 for col in barriers.keys()]
    })
    
    barrier_data = barrier_data.sort_values('Porcentaje', ascending=False)
    
    # Visualizar barreras generales
    st.markdown('<div class="plot-container">', unsafe_allow_html=True)
    fig = px.bar(
        barrier_data,
        x='Barrera',
        y='Porcentaje',
        color='Barrera',
        color_discrete_sequence=get_purple_palette(len(barrier_data)),
        title="Incidencia de Barreras de Acceso a la Cultura (%)"
    )
    
    fig.update_layout(xaxis_tickangle=-45, yaxis_title="Porcentaje (%)")
    st.plotly_chart(fig, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # An√°lisis de barreras por demograf√≠a
    st.subheader("üîç Barreras de Acceso por Grupos Demogr√°ficos")
    
    # Selector de variable demogr√°fica
    barrier_demographic_var = st.selectbox(
        "Analizar barreras por variable demogr√°fica:",
        options=["sexo", "grupo_edad", "nivel_educativo", "etnia", "grupo_ingreso"],
        format_func=lambda x: {
            "sexo": "G√©nero", 
            "grupo_edad": "Grupo de Edad",
            "nivel_educativo": "Nivel Educativo",
            "etnia": "Etnia",
            "grupo_ingreso": "Nivel de Ingresos"
        }.get(x, x)
    )
    
    # Selector de barrera a analizar
    selected_barrier = st.selectbox(
        "Seleccionar barrera para an√°lisis:",
        options=list(barriers.keys()),
        format_func=lambda x: barriers.get(x, x)
    )
    
    # Crear gr√°fico de barrera por grupo demogr√°fico
    st.markdown('<div class="plot-container">', unsafe_allow_html=True)
    
    barrier_by_group = filtered_df.groupby(barrier_demographic_var)[selected_barrier].mean() * 100
    barrier_by_group = barrier_by_group.reset_index()
    barrier_by_group.columns = [barrier_demographic_var, 'Porcentaje']
    
    fig = px.bar(
        barrier_by_group,
        x=barrier_demographic_var,
        y='Porcentaje',
        color=barrier_demographic_var,
        color_discrete_sequence=get_purple_palette(len(barrier_by_group)),
        title=f"Incidencia de '{barriers[selected_barrier]}' por {barrier_demographic_var.replace('_', ' ').title()}"
    )
    
    fig.update_layout(yaxis_title="Porcentaje (%)")
    st.plotly_chart(fig, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Mapa de calor de barreras por nivel de participaci√≥n
    st.subheader("üîÑ Barreras seg√∫n Nivel de Participaci√≥n Cultural")
    
    st.markdown('<div class="plot-container">', unsafe_allow_html=True)
    
    # Preparar datos para el mapa de calor
    barrier_participation_data = filtered_df.groupby('nivel_participacion')[list(barriers.keys())].mean() * 100
    barrier_participation_data.columns = [barriers[col] for col in barrier_participation_data.columns]
    
    # Crear mapa de calor
    fig = px.imshow(
        barrier_participation_data,
        text_auto='.1f',
        color_continuous_scale='Purples',
        title="Incidencia de Barreras (%) por Nivel de Participaci√≥n Cultural",
        labels=dict(x="Barrera", y="Nivel de Participaci√≥n", color="Porcentaje (%)")
    )
    
    st.plotly_chart(fig, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # An√°lisis de correlaci√≥n entre barreras e √≠ndice cultural
    st.subheader("üìâ Impacto de las Barreras en el √çndice Cultural")
    
    # Calcular correlaciones entre barreras e √≠ndice cultural
    barrier_correlations = pd.DataFrame({
        'Barrera': list(barriers.values()),
        'Correlaci√≥n': [filtered_df[col].corr(filtered_df['indice_cultural']) for col in barriers.keys()]
    })
    
    barrier_correlations = barrier_correlations.sort_values('Correlaci√≥n')
    
    # Visualizar correlaciones
    st.markdown('<div class="plot-container">', unsafe_allow_html=True)
    fig = px.bar(
        barrier_correlations,
        x='Barrera',
        y='Correlaci√≥n',
        color='Correlaci√≥n',
        color_continuous_scale='RdBu_r',
        title="Correlaci√≥n entre Barreras e √çndice de Participaci√≥n Cultural"
    )
    
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Conclusiones sobre barreras de acceso
    st.subheader("üìù Hallazgos sobre Barreras de Acceso")
    
    # Obtener principales hallazgos
    top_barrier = barrier_data.iloc[0]['Barrera']
    top_corr_barrier = barrier_correlations.iloc[-1]['Barrera']
    lowest_corr_barrier = barrier_correlations.iloc[0]['Barrera']
    
    st.markdown(f"""
    * **Barrera m√°s com√∫n**: La barrera m√°s reportada es "{top_barrier}" con un {barrier_data.iloc[0]['Porcentaje']:.1f}% de incidencia.
    * **Mayor impacto negativo**: La barrera con mayor correlaci√≥n negativa con el √≠ndice cultural es "{lowest_corr_barrier}".
    * **Mayor impacto positivo/menor impacto negativo**: La barrera "{top_corr_barrier}" muestra la menor correlaci√≥n negativa (o mayor positiva) con la participaci√≥n cultural.
    * **Variaci√≥n demogr√°fica**: Las barreras experimentadas var√≠an significativamente entre diferentes grupos demogr√°ficos.
    * **Patrones por nivel de participaci√≥n**: Se observan patrones claros en las barreras reportadas seg√∫n el nivel de participaci√≥n cultural.
    """)

# P√ÅGINA: RECOMENDACIONES
elif page == "üí° Recomendaciones":
    st.markdown('<div class="section-header"><h2>üí° Recomendaciones y Conclusiones</h2></div>', unsafe_allow_html=True)
    
    # Resumen ejecutivo
    st.subheader("üìã Resumen Ejecutivo")
    
    # Calcular algunos indicadores clave
    participation_pct = len(df[df['nivel_participacion'] != 'Muy Baja']) / len(df) * 100
    high_participation_pct = len(df[df['nivel_participacion'].isin(['Alta', 'Muy Alta'])]) / len(df) * 100
    avg_index = df['indice_cultural'].mean()
    top_barrier = df[['barrera_falta_tiempo', 'barrera_falta_dinero', 'barrera_no_hay_actividades', 
                    'barrera_falta_informacion', 'barrera_transporte', 'barrera_seguridad', 
                    'barrera_no_interesa', 'barrera_responsabilidades_familiares']].mean().idxmax()
    
    barrier_names = {
        'barrera_falta_tiempo': 'la falta de tiempo',
        'barrera_falta_dinero': 'la falta de dinero',
        'barrera_no_hay_actividades': 'la ausencia de oferta cultural',
        'barrera_falta_informacion': 'la falta de informaci√≥n',
        'barrera_transporte': 'los problemas de transporte',
        'barrera_seguridad': 'los problemas de seguridad',
        'barrera_no_interesa': 'la falta de inter√©s',
        'barrera_responsabilidades_familiares': 'las responsabilidades familiares'
    }
    
    st.markdown(f"""
    Este an√°lisis ha examinado los patrones de participaci√≥n cultural entre una muestra de {len(df):,} individuos, evaluando sus caracter√≠sticas demogr√°ficas, niveles de participaci√≥n y barreras de acceso.
    
    **Hallazgos clave:**
    
    - El {participation_pct:.1f}% de la poblaci√≥n muestra alg√∫n nivel de participaci√≥n cultural significativa.
    - Solo el {high_participation_pct:.1f}% presenta niveles altos o muy altos de participaci√≥n.
    - El √≠ndice cultural promedio es de {avg_index:.2f} puntos (escala 0-12).
    - La principal barrera de acceso identificada es {barrier_names[top_barrier]}.
    - Existe una fuerte correlaci√≥n entre el nivel educativo y la participaci√≥n cultural.
    
    Las estrategias recomendadas se centran en reducir las barreras de acceso identificadas y en fomentar una mayor inclusi√≥n cultural entre grupos con menor participaci√≥n.
    """)
    
    # Recomendaciones principales
    st.subheader("üí° Recomendaciones Principales")
    
    # Tabs para categor√≠as de recomendaciones
    rec_tab1, rec_tab2, rec_tab3 = st.tabs([
        "üéØ Aumentar Accesibilidad", 
        "üì¢ Comunicaci√≥n e Informaci√≥n",
        "üë• Inclusi√≥n y Diversidad"
    ])
    
    with rec_tab1:
        st.markdown("""
        ### üéØ Recomendaciones para Aumentar la Accesibilidad
        
        1. **Programas de subsidios culturales**
            - Implementar un sistema de vales o descuentos para actividades culturales dirigido a grupos con menores ingresos.
            - Establecer d√≠as de entrada gratuita o con descuento en museos y centros culturales.
            
        2. **Mejorar la distribuci√≥n geogr√°fica**
            - Descentralizar la oferta cultural, llevando actividades a barrios perif√©ricos y √°reas rurales.
            - Implementar programas culturales itinerantes que visiten diferentes comunidades.
            
        3. **Adaptaci√≥n de horarios**
            - Ofrecer actividades culturales en horarios diversos, incluyendo noches y fines de semana.
            - Crear programas culturales espec√≠ficos para personas con limitaciones de tiempo, como formatos express o digitales.
            
        4. **Transporte y movilidad**
            - Coordinar servicios de transporte especiales para eventos culturales importantes.
            - Establecer colaboraciones con servicios de transporte p√∫blico para ofrecer descuentos en d√≠as de eventos culturales.
        """)
    
    with rec_tab2:
        st.markdown("""
        ### üì¢ Recomendaciones para Comunicaci√≥n e Informaci√≥n
        
        1. **Estrategia digital integrada**
            - Desarrollar una plataforma digital centralizada que agrupe toda la oferta cultural.
            - Implementar un sistema de notificaciones personalizadas seg√∫n intereses culturales.
            
        2. **Campa√±as de concientizaci√≥n**
            - Realizar campa√±as de comunicaci√≥n sobre los beneficios de la participaci√≥n cultural.
            - Destacar historias de impacto positivo y transformaci√≥n a trav√©s de la cultura.
            
        3. **Educaci√≥n cultural desde temprana edad**
            - Fortalecer los programas educativos relacionados con actividades culturales.
            - Establecer visitas escolares regulares a instituciones culturales.
            
        4. **Formaci√≥n de mediadores culturales**
            - Capacitar a personas de las comunidades como embajadores culturales.
            - Desarrollar programas de voluntariado cultural para aumentar la difusi√≥n.
        """)
    
    with rec_tab3:
        st.markdown("""
        ### üë• Recomendaciones para Inclusi√≥n y Diversidad
        
        1. **Programas espec√≠ficos para grupos subrepresentados**
            - Desarrollar iniciativas culturales espec√≠ficas para adultos mayores.
            - Crear programas dirigidos a grupos con menor participaci√≥n seg√∫n el an√°lisis demogr√°fico.
            
        2. **Cultura inclusiva y accesible**
            - Garantizar la accesibilidad f√≠sica en todos los espacios culturales.
            - Ofrecer adaptaciones para personas con discapacidades sensoriales.
            
        3. **Reconocimiento de la diversidad cultural**
            - Valorar y promocionar expresiones culturales diversas y representativas de todos los grupos √©tnicos.
            - Establecer cuotas de representaci√≥n en la programaci√≥n cultural institucional.
            
        4. **Cocreaci√≥n cultural**
            - Implementar metodolog√≠as participativas donde las comunidades sean creadoras de contenido cultural.
            - Establecer laboratorios culturales comunitarios en diferentes territorios.
        """)
    
    # KPIs y m√©tricas de impacto
    st.subheader("üìä KPIs y M√©tricas de Impacto")
    
    # Crear gr√°fico de objetivos
    st.markdown('<div class="plot-container">', unsafe_allow_html=True)
    
    # Datos actuales y objetivos
    kpi_data = pd.DataFrame({
        'M√©trica': [
            '√çndice Cultural Promedio', 
            '% Participaci√≥n Alta/Muy Alta', 
            '% Con acceso a al menos 3 actividades',
            '% Reporta barreras econ√≥micas',
            '% Reporta falta de informaci√≥n'
        ],
        'Valor Actual': [
            df['indice_cultural'].mean(),
            len(df[df['nivel_participacion'].isin(['Alta', 'Muy Alta'])]) / len(df) * 100,
            len(df[df['indice_cultural'] >= 3]) / len(df) * 100,
            df['barrera_falta_dinero'].mean() * 100,
            df['barrera_falta_informacion'].mean() * 100
        ],
        'Objetivo': [
            df['indice_cultural'].mean() * 1.3,  # 30% de aumento
            high_participation_pct * 1.5,  # 50% de aumento
            len(df[df['indice_cultural'] >= 3]) / len(df) * 100 * 1.4,  # 40% de aumento
            df['barrera_falta_dinero'].mean() * 100 * 0.6,  # 40% de reducci√≥n
            df['barrera_falta_informacion'].mean() * 100 * 0.5  # 50% de reducci√≥n
        ]
    })
    
    # Visualizar KPIs
    fig = go.Figure()
    
    # A√±adir barras para valores actuales
    fig.add_trace(go.Bar(
        y=kpi_data['M√©trica'],
        x=kpi_data['Valor Actual'],
        name='Valor Actual',
        orientation='h',
        marker=dict(color='rgba(106, 13, 173, 0.7)')
    ))
    
    # A√±adir marcadores para objetivos
    fig.add_trace(go.Scatter(
        y=kpi_data['M√©trica'],
        x=kpi_data['Objetivo'],
        name='Objetivo',
        mode='markers',
        marker=dict(symbol='diamond', size=12, color='rgba(221, 160, 221, 1)')
    ))
    
    # Actualizar layout
    fig.update_layout(
        title='KPIs y Objetivos de Participaci√≥n Cultural',
        barmode='group',
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Conclusiones finales
    st.subheader("üìù Conclusiones Finales")
    
    st.markdown("""
    El an√°lisis de los datos de participaci√≥n cultural ha revelado patrones significativos que permiten dise√±ar estrategias efectivas para democratizar el acceso a la cultura:
    
    1. **Brechas demogr√°ficas persistentes**: Existen diferencias notables en la participaci√≥n cultural seg√∫n el nivel educativo, grupo de edad y nivel socioecon√≥mico, lo que sugiere la necesidad de pol√≠ticas focalizadas.
    
    2. **Barreras multidimensionales**: Las principales barreras identificadas son econ√≥micas, temporales e informativas, requiriendo un enfoque integral para su superaci√≥n.
    
    3. **Potencial de crecimiento**: El an√°lisis muestra un importante margen de crecimiento en participaci√≥n cultural si se implementan las estrategias recomendadas.
    
    4. **Oportunidades digitales**: La digitalizaci√≥n ofrece nuevas v√≠as para aumentar el acceso cultural, especialmente para quienes enfrentan limitaciones de tiempo o movilidad.
    
    5. **Importancia de la medici√≥n continua**: Se recomienda establecer un sistema de monitoreo permanente de los indicadores de participaci√≥n cultural para evaluar el impacto de las intervenciones.
    
    Implementar las recomendaciones propuestas podr√≠a transformar significativamente el panorama de participaci√≥n cultural, fomentando una sociedad m√°s inclusiva, cohesionada y con mayor bienestar a trav√©s del acceso equitativo a experiencias culturales.
    """)

# CSS para styling
st.markdown("""
<style>
    .plot-container {
        background-color: #fafafa;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }
    
    .section-header {
        background-color: #6a0dad;
        color: white;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 20px;
    }
    
    h2 {
        margin: 0;
    }
    
    .stTabs [data-baseweb="tab-list"] {
        gap: 20px;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
        background-color: #f1f1f1;
        border-radius: 5px 5px 0 0;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #6a0dad !important;
        color: white !important;
    }
</style>
""", unsafe_allow_html=True)