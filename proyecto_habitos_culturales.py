import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
import os
import warnings
warnings.filterwarnings('ignore')

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="An√°lisis de H√°bitos Culturales en Colombia",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Funci√≥n para cargar datos
@st.cache_data
def cargar_datos():
    """
    Carga los datos del DANE. Si no existe el archivo, muestra un uploader
    para que el usuario suba el archivo.
    """
    try:
        df = pd.read_csv('datos_dane.csv')
        return df
    except FileNotFoundError:
        st.warning("No se encontr√≥ el archivo de datos. Por favor, sube el archivo CSV del DANE.")
        uploaded_file = st.file_uploader("Subir archivo CSV del DANE", type=['csv'])
        if uploaded_file is not None:
            df = pd.read_csv(uploaded_file)
            df.to_csv('datos_dane.csv', index=False)
            return df
        else:
            # Datos de ejemplo para demostraci√≥n
            return pd.DataFrame()

# Funci√≥n para limpiar los datos
def limpiar_datos(df):
    """
    Realiza limpieza de datos:
    - Renombra columnas para mayor claridad
    - Maneja valores nulos
    - Detecta y maneja outliers
    - Transforma variables seg√∫n sea necesario
    """
    if df.empty:
        return df
    
    # Crear copia para no modificar el original
    df_limpio = df.copy()
    
    # Renombrar columnas para mayor claridad
    columnas_rename = {
        'Sexo': 'sexo',
        '¬øcu√°ntos a√±os cumplidos tiene <...>?': 'edad',
        'De acuero con su cultura, pueblo o rasgos f√≠sicos usted se reconoce como:': 'etnia',
        '¬øsabe leer y escribir?': 'alfabetismo',
        '¬øactualmente <...>asiste al preescolar, escuela, colegio o universidad?': 'asiste_educacion',
        '¬øcu√°l es el nivel educativo m√°s alto alcanzado por <...>': 'nivel_educativo',
        'Factor de Expasi√≥n': 'factor_expansion',
        '¬øen qu√© actividad ocup√≥ <...> la mayor parte del tiempo la semana pasada?': 'actividad_principal',
        '¬øingreso mensual?': 'ingreso_mensual',
        'En los √∫ltimos 12 meses, ¬øusted asisti√≥ a teatro, √≥pera o danza?': 'asistio_teatro',
        'Frecuencia': 'frecuencia_teatro',
        'En los √∫ltimos 12 meses, ¬øusted asisti√≥ a conciertos, recitales, presentaciones de m√∫sica en espacios abiertos o cerrados en vivo?': 'asistio_conciertos',
        'Frecuencia.1': 'frecuencia_conciertos',
        'Asisti√≥ a conciertos, recitales, eventos, presentaciones o espect√°culos de m√∫sica en vivo, en espacios abiertos o cerrados, en Bar, restaurante, caf√© o similares': 'asistio_musica_bares',
        'En los √∫ltimos 12 meses, ¬øusted asisti√≥ a exposiciones, ferias y muestras de fotograf√≠a, pintura, grabado, dibujo, escultura o artes gr√°ficas?': 'asistio_exposiciones',
        'Frecuencia.2': 'frecuencia_exposiciones',
        '¬øasisti√≥ a bibliotecas en los √∫ltimos 12 meses?': 'asistio_bibliotecas',
        '¬øcon qu√© frecuencia?': 'frecuencia_bibliotecas',
        '¬øA qu√© ha ido <‚Ä¶> a la biblioteca en los √∫ltimos 12 meses?: a. Leer o consultar libros, peri√≥dicos o revistas': 'biblioteca_lectura',
        'En los √∫ltimos 12 meses, ¬øfue a casas de la cultura?': 'asistio_casas_cultura',
        '¬øcon qu√© frecuencia?.1': 'frecuencia_casas_cultura',
        '¬øAsisti√≥ a centros culturales en los √∫ltimos 12 meses?': 'asistio_centros_culturales',
        '¬øCon qu√© frecuencia?': 'frecuencia_centros_culturales',
        'En los √∫ltimos 12 meses, ¬øvisit√≥ museos?': 'visito_museos',
        '¬øcon qu√© frecuencia?.2': 'frecuencia_museos',
        '¬øasisti√≥ a galer√≠as de arte y salas de exposiciones en los √∫ltimos 12 meses?': 'asistio_galerias',
        '¬øcon qu√© frecuencia?.3': 'frecuencia_galerias',
        'En los √∫ltimos 12 meses, ¬øfue a monumentos hist√≥ricos, sitios arqueol√≥gicos, monumentos nacionales o centros hist√≥ricos?': 'visito_monumentos',
        '¬øcon qu√© frecuencia?.4': 'frecuencia_monumentos',
        '¬øUsted tom√≥ cursos o talleres en √°reas art√≠sticas y culturales en los √∫ltimos 12 meses?': 'tomo_cursos_artisticos',
        'En los √∫ltimos 12 meses, ¬øhizo alguna pr√°ctica cultural?': 'hizo_practica_cultural',
        'lee libros': 'lee_libros',
        'frecuencia con que lee libros': 'frecuencia_lectura'
    }
    
    # Aplicar renombrado si las columnas existen
    for old_col, new_col in columnas_rename.items():
        if old_col in df_limpio.columns:
            df_limpio = df_limpio.rename(columns={old_col: new_col})
    
    # Manejo de valores nulos
    # Para variables num√©ricas, usamos la mediana
    numeric_cols = df_limpio.select_dtypes(include=['number']).columns
    for col in numeric_cols:
        if df_limpio[col].isnull().sum() > 0:
            df_limpio[col] = df_limpio[col].fillna(df_limpio[col].median())
    
    # Para variables categ√≥ricas, usamos el valor m√°s frecuente
    cat_cols = df_limpio.select_dtypes(include=['object', 'category']).columns
    for col in cat_cols:
        if df_limpio[col].isnull().sum() > 0:
            df_limpio[col] = df_limpio[col].fillna(df_limpio[col].mode()[0])
    
    # Manejo de outliers en ingreso mensual (si existe)
    if 'ingreso_mensual' in df_limpio.columns:
        Q1 = df_limpio['ingreso_mensual'].quantile(0.25)
        Q3 = df_limpio['ingreso_mensual'].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        
        # Winsorizaci√≥n (recortar valores extremos)
        df_limpio['ingreso_mensual'] = np.where(
            df_limpio['ingreso_mensual'] > upper_bound,
            upper_bound,
            np.where(
                df_limpio['ingreso_mensual'] < lower_bound,
                lower_bound,
                df_limpio['ingreso_mensual']
            )
        )
    
    # Convertir variables de frecuencia a num√©ricas si es posible
    frecuencia_cols = [col for col in df_limpio.columns if 'frecuencia' in col]
    
    # Mapeo para convertir frecuencias textuales a num√©ricas
    mapeo_frecuencia = {
        'Nunca': 0,
        'Una vez al a√±o': 1,
        'Una vez cada seis meses': 2,
        'Una vez cada tres meses': 3,
        'Una vez al mes': 4,
        'Una vez cada quince d√≠as': 5,
        'Una vez a la semana': 6,
        'M√°s de una vez a la semana': 7
    }
    
    for col in frecuencia_cols:
        if col in df_limpio.columns:
            if df_limpio[col].dtype == 'object':
                df_limpio[col] = df_limpio[col].map(mapeo_frecuencia)
                df_limpio[col] = df_limpio[col].fillna(0)  # Si hay valores que no mapean, asumimos 0
    
    return df_limpio

# Funci√≥n para crear nuevas caracter√≠sticas (ingenier√≠a de caracter√≠sticas)
def ingenieria_caracteristicas(df):
    """
    Crea nuevas variables a partir de las existentes para enriquecer el an√°lisis
    """
    if df.empty:
        return df
    
    df_nuevo = df.copy()
    
    # Categor√≠as de edad
    if 'edad' in df_nuevo.columns:
        bins = [0, 12, 18, 30, 45, 60, 100]
        labels = ['Ni√±o', 'Adolescente', 'Joven adulto', 'Adulto', 'Adulto mayor', 'Tercera edad']
        df_nuevo['grupo_edad'] = pd.cut(df_nuevo['edad'], bins=bins, labels=labels, right=False)
    
    # √çndice de participaci√≥n cultural
    columnas_asistencia = [col for col in df_nuevo.columns if col.startswith('asistio_') or col.startswith('visito_')]
    if columnas_asistencia:
        # Convertir a binario si no lo est√°n (1 si asisti√≥, 0 si no)
        for col in columnas_asistencia:
            if col in df_nuevo.columns:
                # Intentar convertir a valores binarios si son strings
                if df_nuevo[col].dtype == 'object':
                    df_nuevo[col] = df_nuevo[col].map({'S√≠': 1, 'No': 0})
                    df_nuevo[col] = df_nuevo[col].fillna(0)
        
        # Crear √≠ndice sumando todas las asistencias
        df_nuevo['indice_participacion_cultural'] = df_nuevo[columnas_asistencia].sum(axis=1)
        
        # Categorizar el √≠ndice
        bins_participacion = [-1, 0, 2, 5, 100]
        labels_participacion = ['Nula', 'Baja', 'Media', 'Alta']
        df_nuevo['nivel_participacion_cultural'] = pd.cut(
            df_nuevo['indice_participacion_cultural'], 
            bins=bins_participacion, 
            labels=labels_participacion
        )
    
    # Nivel socioecon√≥mico aproximado (basado en ingresos si existe la columna)
    if 'ingreso_mensual' in df_nuevo.columns:
        # Definir rangos para Colombia (aproximados en pesos colombianos)
        bins_ingresos = [-1, 1000000, 2500000, 5000000, float('inf')]
        labels_ingresos = ['Bajo', 'Medio-bajo', 'Medio-alto', 'Alto']
        df_nuevo['nivel_socioeconomico'] = pd.cut(
            df_nuevo['ingreso_mensual'], 
            bins=bins_ingresos, 
            labels=labels_ingresos
        )
    
    # √çndice de consumo lector
    if 'lee_libros' in df_nuevo.columns and 'frecuencia_lectura' in df_nuevo.columns:
        # Convertir a binario si no lo est√°n
        if df_nuevo['lee_libros'].dtype == 'object':
            df_nuevo['lee_libros'] = df_nuevo['lee_libros'].map({'S√≠': 1, 'No': 0})
            df_nuevo['lee_libros'] = df_nuevo['lee_libros'].fillna(0)
        
        # Normalizar frecuencia entre 0 y 1
        max_freq = df_nuevo['frecuencia_lectura'].max()
        if max_freq > 0:
            df_nuevo['frecuencia_lectura_norm'] = df_nuevo['frecuencia_lectura'] / max_freq
        else:
            df_nuevo['frecuencia_lectura_norm'] = 0
        
        # √çndice combinado: si lee * frecuencia normalizada
        df_nuevo['indice_lector'] = df_nuevo['lee_libros'] * df_nuevo['frecuencia_lectura_norm']
        
        # Categorizar
        bins_lectura = [-0.001, 0, 0.33, 0.66, 1.01]
        labels_lectura = ['No lector', 'Lector ocasional', 'Lector regular', 'Lector frecuente']
        df_nuevo['perfil_lector'] = pd.cut(
            df_nuevo['indice_lector'], 
            bins=bins_lectura, 
            labels=labels_lectura
        )
    
    # Diversidad cultural (cantidad de diferentes tipos de actividades culturales)
    df_nuevo['diversidad_cultural'] = df_nuevo[columnas_asistencia].sum(axis=1)
    
    return df_nuevo

# Funci√≥n para crear visualizaciones
def crear_visualizaciones(df):
    """
    Crea visualizaciones para el an√°lisis exploratorio
    """
    if df.empty:
        st.warning("No hay datos para visualizar")
        return
    
    # Distribuci√≥n de edad
    if 'edad' in df.columns:
        fig_edad = px.histogram(
            df, 
            x='edad', 
            color='sexo' if 'sexo' in df.columns else None,
            title='Distribuci√≥n de Edades',
            labels={'edad': 'Edad', 'count': 'Cantidad de personas'},
            opacity=0.7,
            marginal='box'
        )
        return fig_edad
    else:
        return None

# Funci√≥n para mostrar estad√≠sticas descriptivas
def mostrar_estadisticas(df):
    """
    Muestra estad√≠sticas descriptivas del dataset
    """
    if df.empty:
        st.warning("No hay datos para mostrar estad√≠sticas")
        return
    
    st.write("### Estad√≠sticas Descriptivas")
    
    # Seleccionar solo columnas num√©ricas para las estad√≠sticas
    num_cols = df.select_dtypes(include=['number']).columns
    if not num_cols.empty:
        stats = df[num_cols].describe()
        st.dataframe(stats)
    else:
        st.info("No hay columnas num√©ricas para mostrar estad√≠sticas")

# Funci√≥n principal de la aplicaci√≥n
def main():
    """
    Funci√≥n principal que ejecuta la aplicaci√≥n Streamlit
    """
    # T√≠tulo principal
    st.title("üìä An√°lisis de H√°bitos Culturales en Colombia")
    st.markdown("""
    Esta aplicaci√≥n analiza los datos de la encuesta del DANE sobre consumo cultural en Colombia,
    permitiendo explorar patrones de participaci√≥n en actividades culturales seg√∫n variables sociodemogr√°ficas.
    """)
    
    # Sidebar con controles
    st.sidebar.title("Controles")
    
    # Cargar datos
    datos_originales = cargar_datos()
    
    if datos_originales.empty:
        st.info("Por favor, sube un archivo CSV para comenzar el an√°lisis")
        return
    
    # Mostrar datos originales si se desea
    if st.sidebar.checkbox("Mostrar datos originales"):
        st.subheader("Datos originales")
        st.dataframe(datos_originales.head(10))
    
    # Limpieza de datos
    datos_limpios = limpiar_datos(datos_originales)
    
    # Ingenier√≠a de caracter√≠sticas
    datos_procesados = ingenieria_caracteristicas(datos_limpios)
    
    # Men√∫ de pesta√±as para organizar el contenido
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä Resumen General", 
        "üë• Perfil Sociodemogr√°fico", 
        "üé≠ Participaci√≥n Cultural", 
        "üìö H√°bitos de Lectura",
        "‚öôÔ∏è An√°lisis Avanzado"
    ])
    
    # Tab 1: Resumen General
    with tab1:
        st.header("Resumen General de los Datos")
        
        # M√©tricas clave
        col1, col2, col3, col4 = st.columns(4)
        
        # Calcular m√©tricas
        total_encuestados = len(datos_procesados)
        
        # Participaci√≥n cultural (si existe la columna)
        participacion_cultural = 0
        if 'nivel_participacion_cultural' in datos_procesados.columns:
            participacion_cultural = (datos_procesados['nivel_participacion_cultural'] != 'Nula').mean() * 100
        
        # Porcentaje de lectores (si existe la columna)
        porcentaje_lectores = 0
        if 'lee_libros' in datos_procesados.columns:
            if datos_procesados['lee_libros'].dtype == 'object':
                porcentaje_lectores = (datos_procesados['lee_libros'] == 'S√≠').mean() * 100
            else:
                porcentaje_lectores = (datos_procesados['lee_libros'] == 1).mean() * 100
        
        # Promedio de actividades culturales
        promedio_actividades = 0
        if 'indice_participacion_cultural' in datos_procesados.columns:
            promedio_actividades = datos_procesados['indice_participacion_cultural'].mean()
        
        with col1:
            st.metric("Total Encuestados", f"{total_encuestados:,}")
        
        with col2:
            st.metric("Participaci√≥n Cultural", f"{participacion_cultural:.1f}%")
        
        with col3:
            st.metric("Lectores", f"{porcentaje_lectores:.1f}%")
        
        with col4:
            st.metric("Promedio Actividades", f"{promedio_actividades:.1f}")
        
        # Estad√≠sticas descriptivas
        mostrar_estadisticas(datos_procesados)
        
        # Visualizaci√≥n general
        st.subheader("Distribuci√≥n de la Poblaci√≥n Encuestada")
        fig_edad = crear_visualizaciones(datos_procesados)
        if fig_edad:
            st.plotly_chart(fig_edad, use_container_width=True)
    
    # Tab 2: Perfil Sociodemogr√°fico
    with tab2:
        st.header("Perfil Sociodemogr√°fico")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if 'sexo' in datos_procesados.columns:
                fig_sexo = px.pie(
                    datos_procesados, 
                    names='sexo',
                    title='Distribuci√≥n por Sexo',
                    hole=0.4
                )
                st.plotly_chart(fig_sexo, use_container_width=True)
            
            if 'grupo_edad' in datos_procesados.columns:
                fig_grupo_edad = px.bar(
                    datos_procesados['grupo_edad'].value_counts().reset_index(),
                    x='grupo_edad',
                    y='count',
                    title='Distribuci√≥n por Grupo de Edad',
                    labels={'count': 'Cantidad', 'grupo_edad': 'Grupo de Edad'}
                )
                st.plotly_chart(fig_grupo_edad, use_container_width=True)
        
        with col2:
            if 'nivel_educativo' in datos_procesados.columns:
                fig_educacion = px.bar(
                    datos_procesados['nivel_educativo'].value_counts().reset_index(),
                    x='count',
                    y='nivel_educativo',
                    title='Nivel Educativo',
                    labels={'count': 'Cantidad', 'nivel_educativo': 'Nivel Educativo'},
                    orientation='h'
                )
                st.plotly_chart(fig_educacion, use_container_width=True)
            
            if 'nivel_socioeconomico' in datos_procesados.columns:
                fig_nse = px.pie(
                    datos_procesados, 
                    names='nivel_socioeconomico',
                    title='Nivel Socioecon√≥mico',
                    hole=0.4
                )
                st.plotly_chart(fig_nse, use_container_width=True)
        
        # Visualizaci√≥n adicional: Educaci√≥n por sexo
        if 'nivel_educativo' in datos_procesados.columns and 'sexo' in datos_procesados.columns:
            st.subheader("Nivel Educativo por Sexo")
            fig_edu_sexo = px.histogram(
                datos_procesados,
                x='nivel_educativo',
                color='sexo',
                barmode='group',
                title='Distribuci√≥n de Nivel Educativo por Sexo',
                labels={'nivel_educativo': 'Nivel Educativo', 'count': 'Cantidad'}
            )
            st.plotly_chart(fig_edu_sexo, use_container_width=True)
    
    # Tab 3: Participaci√≥n Cultural
    with tab3:
        st.header("Participaci√≥n en Actividades Culturales")
        
        # Filtros interactivos
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if 'sexo' in datos_procesados.columns:
                sexo_select = st.multiselect(
                    "Filtrar por Sexo",
                    options=datos_procesados['sexo'].unique(),
                    default=datos_procesados['sexo'].unique()
                )
            else:
                sexo_select = None
        
        with col2:
            if 'grupo_edad' in datos_procesados.columns:
                edad_select = st.multiselect(
                    "Filtrar por Grupo de Edad",
                    options=datos_procesados['grupo_edad'].unique(),
                    default=datos_procesados['grupo_edad'].unique()
                )
            else:
                edad_select = None
                
        with col3:
            if 'nivel_educativo' in datos_procesados.columns:
                edu_select = st.multiselect(
                    "Filtrar por Nivel Educativo",
                    options=datos_procesados['nivel_educativo'].unique(),
                    default=datos_procesados['nivel_educativo'].unique()
                )
            else:
                edu_select = None
        
        # Aplicar filtros
        df_filtrado = datos_procesados.copy()
        
        if sexo_select:
            df_filtrado = df_filtrado[df_filtrado['sexo'].isin(sexo_select)]
        
        if edad_select:
            df_filtrado = df_filtrado[df_filtrado['grupo_edad'].isin(edad_select)]
            
        if edu_select:
            df_filtrado = df_filtrado[df_filtrado['nivel_educativo'].isin(edu_select)]
        
        # Visualizaci√≥n de participaci√≥n cultural
        columnas_asistencia = [col for col in df_filtrado.columns if col.startswith('asistio_') or col.startswith('visito_')]
        
        if columnas_asistencia:
            # Preparar datos para la visualizaci√≥n
            asistencia_data = []
            
            for col in columnas_asistencia:
                if col in df_filtrado.columns:
                    # Obtener nombre limpio para la actividad
                    nombre_actividad = col.replace('asistio_', '').replace('visito_', '').replace('_', ' ').title()
                    
                    # Calcular porcentaje de asistencia
                    if df_filtrado[col].dtype == 'object':
                        porcentaje = (df_filtrado[col] == 'S√≠').mean() * 100
                    else:
                        porcentaje = (df_filtrado[col] == 1).mean() * 100
                    
                    asistencia_data.append({
                        'Actividad': nombre_actividad,
                        'Porcentaje': porcentaje
                    })
            
            # Crear DataFrame para visualizaci√≥n
            df_asistencia = pd.DataFrame(asistencia_data)
            
            if not df_asistencia.empty:
                # Ordenar por porcentaje
                df_asistencia = df_asistencia.sort_values('Porcentaje', ascending=False)
                
                # Crear gr√°fico de barras
                fig_asistencia = px.bar(
                    df_asistencia,
                    x='Actividad',
                    y='Porcentaje',
                    title='Porcentaje de Asistencia por Tipo de Actividad Cultural',
                    labels={'Porcentaje': 'Porcentaje (%)', 'Actividad': 'Tipo de Actividad'},
                    text_auto='.1f'
                )
                fig_asistencia.update_traces(texttemplate='%{text}%', textposition='outside')
                fig_asistencia.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')
                
                st.plotly_chart(fig_asistencia, use_container_width=True)
                
                # Heatmap de correlaci√≥n entre actividades
                st.subheader("Correlaci√≥n entre Actividades Culturales")
                
                # Crear matriz de correlaci√≥n
                corr_matrix = df_filtrado[columnas_asistencia].corr()
                
                # Gr√°fico de correlaci√≥n
                fig_corr = px.imshow(
                    corr_matrix,
                    labels=dict(color="Correlaci√≥n"),
                    x=[col.replace('asistio_', '').replace('visito_', '').replace('_', ' ').title() for col in corr_matrix.columns],
                    y=[col.replace('asistio_', '').replace('visito_', '').replace('_', ' ').title() for col in corr_matrix.columns],
                    title="Correlaci√≥n entre Actividades Culturales"
                )
                
                st.plotly_chart(fig_corr, use_container_width=True)
                
                # Analisis por variables sociodemogr√°ficas
                st.subheader("Participaci√≥n Cultural por Variables Sociodemogr√°ficas")
                
                # Selector de actividad espec√≠fica
                actividad_seleccionada = st.selectbox(
                    "Selecciona una actividad cultural",
                    options=[col.replace('asistio_', '').replace('visito_', '').replace('_', ' ').title() for col in columnas_asistencia]
                )
                
                # Obtener columna original
                col_original = [col for col in columnas_asistencia if col.replace('asistio_', '').replace('visito_', '').replace('_', ' ').title() == actividad_seleccionada][0]
                
                # Gr√°ficos por variables sociodemogr√°ficas
                col1, col2 = st.columns(2)
                
                with col1:
                    if 'sexo' in df_filtrado.columns:
                        # Crear gr√°fico para sexo
                        temp_df = df_filtrado.groupby('sexo')[col_original].mean().reset_index()
                        temp_df[col_original] = temp_df[col_original] * 100  # Convertir a porcentaje
                        
                        fig_sexo = px.bar(
                            temp_df,
                            x='sexo',
                            y=col_original,
                            title=f'Asistencia a {actividad_seleccionada} por Sexo',
                            labels={col_original: 'Porcentaje (%)', 'sexo': 'Sexo'},
                            text_auto='.1f'
                        )
                        fig_sexo.update_traces(texttemplate='%{text}%', textposition='outside')
                        
                        st.plotly_chart(fig_sexo, use_container_width=True)
                
                with col2:
                    if 'grupo_edad' in df_filtrado.columns:
                        # Crear gr√°fico para grupo de edad
                        temp_df = df_filtrado.groupby('grupo_edad')[col_original].mean().reset_index()
                        temp_df[col_original] = temp_df[col_original] * 100  # Convertir a porcentaje
                        
                        fig_edad = px.bar(
                            temp_df,
                            x='grupo_edad',
                            y=col_original,
                            title=f'Asistencia a {actividad_seleccionada} por Grupo de Edad',
                            labels={col_original: 'Porcentaje (%)', 'grupo_edad': 'Grupo de Edad'},
                            text_auto='.1f'
                        )
                        fig_edad.update_traces(texttemplate='%{text}%', textposition='outside')
                        
                        st.plotly_chart(fig_edad, use_container_width=True)
                
                # Visualizaci√≥n adicional por nivel educativo
                if 'nivel_educativo' in df_filtrado.columns:
                    # Crear gr√°fico para nivel educativo
                    temp_df = df_filtrado.groupby('nivel_educativo')[col_original].mean().reset_index()
                    temp_df[col_original] = temp_df[col_original] * 100  # Convertir a porcentaje
                    
                    fig_edu = px